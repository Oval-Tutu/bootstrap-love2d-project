name: Build LÖVE 🩷💙

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:

env:
  BUILD_TYPE: ${{ fromJSON('["dev", "release"]')[startsWith(github.ref, 'refs/tags/')] }}
  OUTPUT_FOLDER: ./builds
  PRODUCT_NAME: Template
  PRODUCT_ID: com.ovaltutu.template
  PRODUCT_DESC: A template game made with LÖVE
  PRODUCT_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || '0.0.0' }}
  PRODUCT_COPYRIGHT: Copyright (c) 2024 Oval Tutu
  PRODUCT_COMPANY: Oval Tutu
  PRODUCT_WEBSITE: https://oval-tutu.com
  PRODUCT_UUID: 3e64d17c-8797-4382-921f-cf488b22073f
  VER_LOVE: 11.5
  VER_APPIMAGE: 1.9.0

jobs:
  configure:
    runs-on: ubuntu-22.04
    outputs:
      build_num: ${{ steps.set_build_num.outputs.build_num }}
      release_id: ${{ steps.create_release.outputs.id || '' }}
      upload_url: ${{ steps.create_release.outputs.upload_url || '' }}
    steps:
      - name: Generate build number
        id: set_build_num
        shell: bash
        run: echo "build_num=$(date +%y.%j.%H%M)" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        if: env.BUILD_TYPE == 'release'
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Get PR and Issue List
        id: get_changes
        if: env.BUILD_TYPE == 'release'
        run: |
          # Get the previous tag or default to first commit
          git fetch --all --tags
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)

          # Get merged PRs
          PRs=$(gh pr list --search "is:merged merged:>${PREV_TAG}" --json number,title,author --template \
            '{{range .}}* #{{.number}} {{.title}} (@{{.author.login}}){{"\n"}}{{end}}')

          # Get closed issues
          ISSUES=$(gh issue list --search "is:closed closed:>${PREV_TAG} -is:pr" --json number,title,author --template \
            '{{range .}}* #{{.number}} {{.title}} (@{{.author.login}}){{"\n"}}{{end}}')

          # Handle empty results
          [ -z "$PRs" ] && PRs="* No pull requests merged in this release"
          [ -z "$ISSUES" ] && ISSUES="* No issues closed in this release"

          # Save outputs
          {
            echo "prs<<EOF"
            echo "$PRs"
            echo "EOF"
            echo "issues<<EOF"
            echo "$ISSUES"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create draft release
        if: env.BUILD_TYPE == 'release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.PRODUCT_NAME }} ${{ github.ref_name }} is out! ️🕹️
          body: |
            ${{ env.PRODUCT_COMPANY }} is delighted to announce the release of ${{ env.PRODUCT_NAME }} ${{ github.ref_name }}! 🎉
            ${{ env.PRODUCT_DESC }}. ${{ env.PRODUCT_COPYRIGHT }}
            * ${{ env.PRODUCT_WEBSITE }}

            This release of ${{ env.PRODUCT_NAME }} was built via:
            - Build number: ${{ steps.set_build_num.outputs.build_num }}
            - GitHub Run: ${{github.run_number}}
            - iOS App store version: 0.0.${{github.run_number}}
            - macOS App store version: 0.0.${{github.run_number}}

            ## 🔀 Merged Pull Requests
            ${{ steps.get_changes.outputs.prs }}

            ## 🎯 Closed Issues
            ${{ steps.get_changes.outputs.issues }}

            Full changelog: [`${{ github.ref_name }}`](https://github.com/${{ github.repository }}/commits/${{ github.ref_name }})*

            > This release was automatically generated by GitHub Actions
          draft: true
          prerelease: false

  build-love:
    runs-on: ubuntu-22.04
    needs: [configure]
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.love" ./game/* -xr!.gitkeep
      - name: Upload .love artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_love
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.love
      - name: Upload .love release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.love
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}.love
          asset_content_type: application/x-love-game

  build-linux:
    runs-on: ubuntu-22.04
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Create .png icon
        run: convert ./resources/icon.png -resize 256x256 "${{ env.OUTPUT_FOLDER }}/icon.png"
      # Adapted from:
      # - https://github.com/love-actions/love-actions-linux/blob/main/action.yml
      - name: Create AppImage
        run: |
          sudo add-apt-repository universe
          sudo apt-get -y install desktop-file-utils libfuse2

          curl -L --retry 5 https://github.com/AppImage/appimagetool/releases/download/${{ env.VER_APPIMAGE }}/appimagetool-x86_64.AppImage -o ./tools/appimagetool.AppImage
          curl -L --retry 5 https://github.com/love2d/love/releases/download/${{ env.VER_LOVE }}/love-${{ env.VER_LOVE }}-x86_64.AppImage -o ./tools/love.AppImage
          chmod a+x ./tools/appimagetool.AppImage
          chmod a+x ./tools/love.AppImage
          pushd ./tools
            ./love.AppImage --appimage-extract
          popd

          rm -f ./tools/squashfs-root/love.desktop
          cat > ./tools/squashfs-root/${{ env.PRODUCT_NAME }}.desktop << EOF
          [Desktop Entry]
          Name=${{ env.PRODUCT_NAME }}
          Comment=${{ env.PRODUCT_DESC }}
          Type=Application
          Keywords=love;game;
          MimeType=application/x-love-game;
          Categories=Game;
          Exec=${{ env.PRODUCT_NAME }} %f
          Icon=${{ env.PRODUCT_NAME }}
          Terminal=false
          NoDisplay=false
          EOF

          echo "Assembling executable..."
          sed -i 's|bin/love|bin/${{ env.PRODUCT_NAME }}|g' ./tools/squashfs-root/AppRun
          cat ./tools/squashfs-root/bin/love ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love > ./tools/squashfs-root/bin/${{ env.PRODUCT_NAME }}
          chmod +x ./tools/squashfs-root/bin/${{ env.PRODUCT_NAME }}
          rm -f ./tools/squashfs-root/bin/love

          if [ -f "${{ env.OUTPUT_FOLDER }}/icon.png" ]; then
            echo "Copying icon..."
            rm -rf ./tools/squashfs-root/love.svg ./tools/squashfs-root/.DirIcon
            ICON_PATH=$(basename -- "${{ env.OUTPUT_FOLDER }}/icon.png")
            cp ${{ env.OUTPUT_FOLDER }}/icon.png "./tools/squashfs-root/${{ env.PRODUCT_NAME }}.${ICON_PATH##*.}"
            cp ${{ env.OUTPUT_FOLDER }}/icon.png ./tools/squashfs-root/.DirIcon
          fi

          # Copy any required shared libraries
          if [ -d ./resources/linux/lib ]; then
            echo "Copying lib..."
            mkdir -p ./tools/squashfs-root/lib
            cp -r -f ./resources/linux/lib/* ./tools/squashfs-root/lib
          fi

          # Copy any required shared resources
          if [ -d ./resources/linux/share ]; then
            echo "Copying share..."
            mkdir -p ./tools/squashfs-root/share
            cp -r -f ./resources/linux/share/* ./tools/squashfs-root/share
          fi

          # Build appImage package
          ./tools/appimagetool.AppImage ./tools/squashfs-root ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage
          chmod a+x ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage
      - name: Upload AppImage artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_Linux_AppImage
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage
      - name: Upload AppImage release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}.AppImage
          asset_content_type: application/x-executable

  build-windows:
    runs-on: windows-latest
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        shell: bash
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Create .ico icon
        shell: bash
        run: magick ./resources/icon.png -define icon:auto-resize="256,128,96,64,48,32,16" "${{ env.OUTPUT_FOLDER }}/icon.ico"
      # - name: Build Windows packages
      #   id: build-packages
      #   uses: love-actions/love-actions-windows@v1
      #   with:
      #     love-package: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love
      #     output-folder: ${{ env.OUTPUT_FOLDER }}
      #     product-name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}
      #     app-id: ${{ env.PRODUCT_UUID }}
      #     icon-path: ${{ env.OUTPUT_FOLDER }}/icon.ico
      #     installer-languages: English.isl
      #     project-website: ${{ env.PRODUCT_WEBSITE }}
      #     #rc-path: ./.github/build/windows/${{ env.BUILD_TYPE }}/template.rc

      # Adapted from:
      # - https://github.com/love-actions/love-actions-windows/blob/main/action.yml
      - name: Download Windows tools
        env:
          TEMP_PATH: ./temp.zip
        shell: pwsh
        run: |
          cd ./tools
          curl -L --retry 5 https://github.com/love2d/love/releases/download/${{ env.VER_LOVE }}/love-${{ env.VER_LOVE }}-win32.zip -o ${{ env.TEMP_PATH }}
          7z x ${{ env.TEMP_PATH }} -o'./'
          rm ${{ env.TEMP_PATH }}
          mv love-${{ env.VER_LOVE }}-win32 love-win32

          curl -L --retry 5 https://github.com/love2d/love/releases/download/${{ env.VER_LOVE }}/love-${{ env.VER_LOVE }}-win64.zip -o ${{ env.TEMP_PATH }}
          7z x ${{ env.TEMP_PATH }} -o'./'
          rm ${{ env.TEMP_PATH }}
          mv love-${{ env.VER_LOVE }}-win64 love-win64

          curl -L --retry 5 http://www.angusj.com/resourcehacker/resource_hacker.zip -o ${{ env.TEMP_PATH }}
          7z x ${{ env.TEMP_PATH }} -o'./'
          rm ${{ env.TEMP_PATH }}

          curl -L --retry 5 https://jrsoftware.org/download.php/is.exe -o is.exe
          ./is.exe /verysilent

      - name: Assemble product folders
        shell: pwsh
        run: |
          cp ${{ env.OUTPUT_FOLDER }}\${{ env.PRODUCT_NAME }}.love .\tools\game.love

          cd .\tools\

          cmd /c '".\ResourceHacker.exe" -open ".\love-win32\love.exe" -save ".\love-win32\love.exe" -action delete -mask ICONGROUP,,'
          cmd /c '".\ResourceHacker.exe" -open ".\love-win32\love.exe" -save ".\love-win32\love.exe" -action delete -mask VERSIONINFO,,'

          cmd /c '".\ResourceHacker.exe" -open ".\love-win64\love.exe" -save ".\love-win64\love.exe" -action delete -mask ICONGROUP,,'
          cmd /c '".\ResourceHacker.exe" -open ".\love-win64\love.exe" -save ".\love-win64\love.exe" -action delete -mask VERSIONINFO,,'

          cd ..
          cp ${{ env.OUTPUT_FOLDER }}\icon.ico .\tools\icon.ico
          cd .\tools\
          cmd /c '".\ResourceHacker.exe" -open ".\love-win32\love.exe" -save ".\love-win32\love.exe" -action addoverwrite -res ".\icon.ico" -mask ICONGROUP,1,'
          cmd /c '".\ResourceHacker.exe" -open ".\love-win64\love.exe" -save ".\love-win64\love.exe" -action addoverwrite -res ".\icon.ico" -mask ICONGROUP,1,'

          #if("${{ inputs.rc-path }}")
          #{
          #  cmd /c '".\ResourceHacker.exe" -open "${{ inputs.rc-path }}" -save ".\${{ env.PRODUCT_NAME }}.res" -action compile'
          #  cmd /c '".\ResourceHacker.exe" -open ".\love-win32\love.exe" -save ".\love-win32\love.exe" -action addoverwrite -res ".\${{ env.PRODUCT_NAME }}.res" -mask VERSIONINFO,1,'
          #  cmd /c '".\ResourceHacker.exe" -open ".\love-win64\love.exe" -save ".\love-win64\love.exe" -action addoverwrite -res ".\${{ env.PRODUCT_NAME }}.res" -mask VERSIONINFO,1,'
          #}

          del .\love-win32\lovec.exe
          del .\love-win32\game.ico
          del .\love-win32\love.ico
          del .\love-win32\changes.txt
          del .\love-win32\readme.txt

          del .\love-win64\lovec.exe
          del .\love-win64\game.ico
          del .\love-win64\love.ico
          del .\love-win64\changes.txt
          del .\love-win64\readme.txt

          mkdir -p .\build\x86
          mkdir -p .\build\x64

          cp .\love-win32\* .\build\x86\
          cp .\love-win64\* .\build\x64\

          cmd /c copy /b .\build\x86\love.exe + .\game.love .\build\x86\${{ env.PRODUCT_NAME }}.exe
          del .\build\x86\love.exe

          cmd /c copy /b .\build\x64\love.exe + .\game.love .\build\x64\${{ env.PRODUCT_NAME }}.exe
          del .\build\x64\love.exe
      - name: Copy Windows libraries
        shell: bash
        run: |
          # 32-bit
          if [ -d ./resources/windows/x86 ]; then
            cp -r -f ./resources/windows/x86 ./tools/build/x86/
          fi
          # 64-bit
          if [ -d ./resources/windows/x64 ]; then
            cp -r -f ./resources/windows/x64 ./tools/build/x64/
          fi
      - name: Checkout issrc
        uses: actions/checkout@v4
        with:
          path: ./tools/issrc
          repository: jrsoftware/issrc
      - name: Processing language files
        shell: bash
        run: |
          mkdir -p ./tools/language
          languages="English.isl"
          mv ./tools/issrc/Files/Languages/Unofficial/* ./tools/issrc/Files/Languages/
          cp ./tools/issrc/Files/Default.isl ./tools/issrc/Files/Languages/English.isl
          rm -rf ./tools/issrc/Files/Languages/Unofficial
          for item in $languages; do
            if test -f $item; then
              cp $item ./tools/language
            else
              cp ./tools/issrc/Files/Languages/$item ./tools/language
            fi
          done
      - name: Create iss file
        shell: python3 {0}
        run: |
          import os
          import re

          #rc_path = "${{ inputs.rc-path }}"
          value_dict: dict = {}

          #if rc_path != "":
          #    with open("${{ inputs.rc-path }}", "r", encoding="UTF-8") as f:
          #        content = f.read()
          #        string_file_info = re.findall(
          #            r'BLOCK "StringFileInfo"[\s\S]*?}', content, re.IGNORECASE
          #        )
          #
          #    value_dict = {}
          #
          #    for i in string_file_info:
          #        value = dict(re.findall((r'VALUE "([\w ]+)", (.*)'), i, re.IGNORECASE))
          #        value_dict.update(value)
          #
          #    for i, j in value_dict.items():
          #        j = j.replace('"', "")
          #        value_dict[i] = j

          template_iss = r"""
          #define AppName "@AppName"
          #define AppWebsite "${{ env.PRODUCT_WEBSITE }}"

          [Setup]
          AppId=${{ env.PRODUCT_UUID }}
          AppName={#AppName}
          AppVersion=@AppVersion
          AppVerName={#AppName} @AppVersion
          AppPublisher=@AppPublisher
          AppCopyright=@Copyright
          AppPublisherURL={#AppWebsite}
          AppSupportURL={#AppWebsite}
          AppUpdatesURL={#AppWebsite}
          DefaultDirName={autopf}\{#AppName}
          DefaultGroupName={#AppName}
          AllowNoIcons=yes
          LicenseFile=.\love-win64\license.txt
          PrivilegesRequired=lowest
          PrivilegesRequiredOverridesAllowed=dialog
          OutputDir=.\installer
          OutputBaseFilename=@OutName
          @Icon
          UninstallDisplayIcon={app}\{#AppName}.exe
          Compression=zip
          SolidCompression=no
          WizardStyle=modern
          ArchitecturesInstallIn64BitMode=x64

          [Languages]
          @Languages

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

          [Files]
          Source: ".\game.love"; DestDir: "{app}\Temp"

          Source: ".\love-win64\love.exe"; DestDir: "{app}\Temp"; Check: Is64BitInstallMode
          Source: ".\love-win64\license.txt"; DestDir: "{app}"; Check: Is64BitInstallMode
          Source: ".\love-win64\love.dll"; DestDir: "{app}"; Check: Is64BitInstallMode
          Source: ".\love-win64\lua51.dll"; DestDir: "{app}"; Check: Is64BitInstallMode
          Source: ".\love-win64\mpg123.dll"; DestDir: "{app}"; Check: Is64BitInstallMode
          Source: ".\love-win64\msvcp120.dll"; DestDir: "{app}"; Check: Is64BitInstallMode
          Source: ".\love-win64\msvcr120.dll"; DestDir: "{app}"; Check: Is64BitInstallMode
          Source: ".\love-win64\OpenAL32.dll"; DestDir: "{app}"; Check: Is64BitInstallMode
          Source: ".\love-win64\SDL2.dll"; DestDir: "{app}"; Check: Is64BitInstallMode

          Source: ".\love-win32\love.exe"; DestDir: "{app}\Temp"; Check: not Is64BitInstallMode
          Source: ".\love-win32\license.txt"; DestDir: "{app}"; Check: not Is64BitInstallMode
          Source: ".\love-win32\love.dll"; DestDir: "{app}"; Check: not Is64BitInstallMode
          Source: ".\love-win32\lua51.dll"; DestDir: "{app}"; Check: not Is64BitInstallMode
          Source: ".\love-win32\mpg123.dll"; DestDir: "{app}"; Check: not Is64BitInstallMode
          Source: ".\love-win32\msvcp120.dll"; DestDir: "{app}"; Check: not Is64BitInstallMode
          Source: ".\love-win32\msvcr120.dll"; DestDir: "{app}"; Check: not Is64BitInstallMode
          Source: ".\love-win32\OpenAL32.dll"; DestDir: "{app}"; Check: not Is64BitInstallMode
          Source: ".\love-win32\SDL2.dll"; DestDir: "{app}"; Check: not Is64BitInstallMode

          @ExtraAssets

          [Icons]
          Name: "{group}\{#AppName}"; Filename: "{app}\@ExeName"
          Name: "{group}\{cm:UninstallProgram,{#AppName}}"; Filename: "{uninstallexe}"
          Name: "{autodesktop}\{#AppName}"; Filename: "{app}\@ExeName"; Tasks: desktopicon

          [Run]
          Filename: "{app}\@ExeName"; Description: "{cm:LaunchProgram,{#StringChange(AppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

          [Code]
          procedure CurStepChanged(CurStep: TSetupStep);
          var
              InstallDir: string;
              ResultCode: Integer;
          begin
              if CurStep = ssPostinstall then
              begin
                  InstallDir := ExpandConstant('{app}');
                  Exec('cmd.exe', '/c copy /b .\love.exe + .\game.love "..\@ExeName"', InstallDir + '\Temp', SW_HIDE, ewWaitUntilTerminated, ResultCode);
                  Exec('cmd.exe', '/c rd /S /Q "' + InstallDir + '\Temp"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
              end;
          end;
          """

          x86_path = r"./resources/windows/x86/"
          x64_path = r"./resources/windows/x64/"
          extra_assets = ""

          # Check x86 directory
          if os.path.exists(x86_path):
            extra_assets_x86_list = x86_path.split()
            for i in extra_assets_x86_list:
              dest_dir = "{app}"
              flag = ""
              i = i.rstrip("/")
              i = i.rstrip("\\")
              i = os.path.abspath(i)
              if os.path.isdir(i):
                  dir_name = os.path.basename(i)
                  dest_dir = f"{{app}}/{os.path.basename(i)}"
                  flag = "; Flags: recursesubdirs"
              extra_assets += (
                  f'Source: "{i}"; DestDir: "{dest_dir}"{flag}; Check: not Is64BitInstallMode\n'
              )

          # Check x64 directory
          if os.path.exists(x64_path):
            extra_assets_x64_list = x64_path.split()
            for i in extra_assets_x64_list:
              dest_dir = "{app}"
              flag = ""
              i = i.rstrip("/")
              i = i.rstrip("\\")
              i = os.path.abspath(i)
              if os.path.isdir(i):
                  dir_name = os.path.basename(i)
                  dest_dir = f"{{app}}/{os.path.basename(i)}"
                  flag = "; Flags: recursesubdirs"
              extra_assets += (
                  f'Source: "{i}"; DestDir: "{dest_dir}"{flag}; Check: Is64BitInstallMode\n'
              )

          language_file_list = os.listdir("./tools/language")
          languages = ""
          for i in language_file_list:
              name = os.path.splitext(i)[0]
              languages += f'Name: "{name}"; MessagesFile: ".\\language\\{i}"\n'

          processed_iss = (
              template_iss.replace(
                  "@AppName",
                  product_name := (
                      value_dict["ProductName"]
                      if "ProductName" in value_dict
                      else r"${{ env.PRODUCT_NAME }}"
                  ),
              )
              .replace(
                  "@AppVersion",
                  value_dict["ProductVersion"]
                  if "ProductVersion" in value_dict
                  else value_dict["FileVersion"]
                  if "FileVersion" in value_dict
                  else "0.0.0.0",
              )
              .replace(
                  "@AppPublisher",
                  value_dict["CompanyName"] if "CompanyName" in value_dict else "",
              )
              .replace(
                  "@Copyright",
                  value_dict["LegalCopyright"] if "LegalCopyright" in value_dict else "",
              )
              .replace("@ExeName", f"{product_name}.exe")
              .replace("@ExtraAssets", extra_assets)
              .replace("@Languages", languages)
              .replace(
                  "@Icon",
                  r"SetupIconFile=.\icon.ico"
                  if r"${{ env.OUTPUT_FOLDER }}/icon.ico" != ""
                  else "",
              )
              .replace("@OutName", "${{ env.PRODUCT_NAME }}_installer")
          )

          with open(
              "./tools/${{ env.PRODUCT_NAME }}.iss",
              "w",
              encoding="UTF-8",
          ) as file:
              file.write(processed_iss)
      - name: Build installer
        shell: pwsh
        run: |
          cd ./tools
          iscc ./${{ env.PRODUCT_NAME }}.iss
      - name: Gather packages in output folder
        id: gather-packages
        shell: bash
        run: |
          7z a -tzip ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_x86.zip ./tools/build/x86/*
          7z a -tzip ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_x64.zip ./tools/build/x64/*
          mv ./tools/installer/${{ env.PRODUCT_NAME }}_installer.exe ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_installer.exe
      - name: Upload Windows 32-bit artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_Windows_x86_zip
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_x86.zip
      - name: Upload Windows 64-bit artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_Windows_x64_zip
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_x64.zip
      - name: Upload Windows installer artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_Windows_installer_exe
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_installer.exe
      - name: Upload Windows 32-bit release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_x86.zip
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}_Windows_x86.zip
          asset_content_type: application/zip
      - name: Upload Windows 64-bit release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_x64.zip
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}_Windows_x64.zip
          asset_content_type: application/zip
      - name: Upload Windows installer release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_installer.exe
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}_installer.exe
          asset_content_type: application/x-msdownload

  build-android:
    runs-on: ubuntu-22.04
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Create Android res/ folder
        run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}/res/mipmap-{hdpi,mdpi,xhdpi,xxhdpi,xxxhdpi}
          mkdir -p ${{ env.OUTPUT_FOLDER }}/res/values
          convert ./resources/icon.png -resize 72x72 ${{ env.OUTPUT_FOLDER }}/res/mipmap-hdpi/ic_launcher.png
          convert ./resources/icon.png -resize 48x48 ${{ env.OUTPUT_FOLDER }}/res/mipmap-mdpi/ic_launcher.png
          convert ./resources/icon.png -resize 96x96 ${{ env.OUTPUT_FOLDER }}/res/mipmap-xhdpi/ic_launcher.png
          convert ./resources/icon.png -resize 144x144 ${{ env.OUTPUT_FOLDER }}/res/mipmap-xxhdpi/ic_launcher.png
          convert ./resources/icon.png -resize 192x192 ${{ env.OUTPUT_FOLDER }}/res/mipmap-xxxhdpi/ic_launcher.png
          echo '<resources><string name="app_name">${{ env.PRODUCT_NAME }}</string></resources>' > ${{ env.OUTPUT_FOLDER }}/res/values/strings.xml
      - name: Build Android packages
        id: build-packages
        uses: love-actions/love-actions-android@v2
        with:
          love-package: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love
          output-folder: ${{ env.OUTPUT_FOLDER }}
          product-name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}
          app-name: ${{ env.PRODUCT_NAME }}
          bundle-id: ${{ env.PRODUCT_ID }}
          #icon-specifier: "@mipmap/icon"
          #keystore-alias: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
          #keystore-base64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          #keystore-key-password: ${{ secrets.ANDROID_KEYSTORE_KEYPASSWORD }}
          #keystore-store-password: ${{ secrets.ANDROID_KEYSTORE_STOREPASSWORD }}
          resource-path: ${{ env.OUTPUT_FOLDER }}/res
          version-string: ${{ env.PRODUCT_VERSION }}
          # An always incrementing integer so app stores can track versions
          # But not the actual version number
          version-code: ${{ github.run_number }}
      - name: Upload Android debug .apk artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_Android_debug_apk
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-debug.apk
      - name: Upload Android release .apk artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_Android_release_apk
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-release.apk
      - name: Upload Android release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-release.apk
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}-release.apk
          asset_content_type: application/vnd.android.package-archive

  build-macos-portable:
    runs-on: macos-latest
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Create macOS icon.icns
        run: |
          mkdir -p icon.iconset
          sips -z 16 16     ./resources/icon.png --out icon.iconset/icon_16x16.png
          sips -z 32 32     ./resources/icon.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32     ./resources/icon.png --out icon.iconset/icon_32x32.png
          sips -z 64 64     ./resources/icon.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128   ./resources/icon.png --out icon.iconset/icon_128x128.png
          sips -z 256 256   ./resources/icon.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256   ./resources/icon.png --out icon.iconset/icon_256x256.png
          sips -z 512 512   ./resources/icon.png --out icon.iconset/icon_256x256@2x.png
          sips -z 512 512   ./resources/icon.png --out icon.iconset/icon_512x512.png
          sips -z 1024 1024 ./resources/icon.png --out icon.iconset/icon_512x512@2x.png
          iconutil -c icns icon.iconset -o ${{ env.OUTPUT_FOLDER }}/icon.icns
          rm -rf icon.iconset
      - name: Build macOS packages
        id: build-packages
        uses: love-actions/love-actions-macos-portable@v1
        with:
          love-package: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love
          output-folder: ${{ env.OUTPUT_FOLDER }}
          product-name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable
          #account-username: ${{ secrets.APPLE_ACCOUNT_USERNAME }}
          #account-password: ${{ secrets.APPLE_ACCOUNT_PASSWORD }}
          #team-id: "${{ secrets.APPLE_DEVELOPER_TEAM_ID }}"
          app-name: ${{ env.PRODUCT_NAME }}
          bundle-id: ${{ env.PRODUCT_ID }}
          copyright: ${{ env.PRODUCT_COPYRIGHT }}
          #developer-id-application-base64: ${{ secrets.APPLE_CERT_DEVELOPER_ID_APPLICATION }}
          #developer-id-application-password: ${{ secrets.APPLE_CERT_DEVELOPER_ID_APPLICATION_PWD }}
          #developer-id-installer-base64: ${{ secrets.APPLE_CERT_DEVELOPER_ID_INSTALLER }}
          #developer-id-installer-password: ${{ secrets.APPLE_CERT_DEVELOPER_ID_INSTALLER_PWD }}
          #dmg-background-path: ./.github/build/macOS/${{ env.BUILD_TYPE }}/dmg.png
          #dmg-icon-position: "239 203"
          #dmg-icon-size: "100"
          #dmg-link-position: "565 203"
          #dmg-text-size: "12"
          #dmg-volume-icon-path: ./.github/build/macOS/${{ env.BUILD_TYPE }}/dmg.icns
          dmg-volume-name: ${{ env.PRODUCT_NAME }}
          #dmg-window-position: "200 120"
          #dmg-window-size: "800 500"
          icon-path: ${{ env.OUTPUT_FOLDER }}/icon.icns
          version-string: ${{ env.PRODUCT_VERSION }}
      - name: Upload macOS portable pkg artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_portable_pkg
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.pkg
      - name: Upload macOS portable dmg artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_portable_dmg
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.dmg
      - name: Upload macOS zip artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_portable_zip
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.zip
      - name: Upload macOS portable pkg release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.pkg
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}-portable.pkg
          asset_content_type: application/x-installer
      - name: Upload macOS portable dmg release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.dmg
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}-portable.dmg
          asset_content_type: application/x-apple-diskimage
      - name: Upload macOS portable zip release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.zip
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}-portable.zip
          asset_content_type: application/zip

  build-macos-appstore:
    runs-on: macos-latest
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Create macOS icon.icns
        run: |
          mkdir -p icon.iconset
          sips -z 16 16     ./resources/icon.png --out icon.iconset/icon_16x16.png
          sips -z 32 32     ./resources/icon.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32     ./resources/icon.png --out icon.iconset/icon_32x32.png
          sips -z 64 64     ./resources/icon.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128   ./resources/icon.png --out icon.iconset/icon_128x128.png
          sips -z 256 256   ./resources/icon.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256   ./resources/icon.png --out icon.iconset/icon_256x256.png
          sips -z 512 512   ./resources/icon.png --out icon.iconset/icon_256x256@2x.png
          sips -z 512 512   ./resources/icon.png --out icon.iconset/icon_512x512.png
          sips -z 1024 1024 ./resources/icon.png --out icon.iconset/icon_512x512@2x.png
          iconutil -c icns icon.iconset -o ${{ env.OUTPUT_FOLDER }}/icon.icns
          rm -rf icon.iconset
      - name: Build macOS packages
        id: build-packages
        uses: love-actions/love-actions-macos-appstore@v1
        with:
          love-package: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love
          output-folder: ${{ env.OUTPUT_FOLDER }}
          product-name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-appstore
          app-name: ${{ env.PRODUCT_NAME }}
          #apple-development-base64: ${{ secrets.APPLE_CERT_APPLE_DEVELOPMENT_BASE64 }}
          #apple-development-password: ${{ secrets.APPLE_CERT_APPLE_DEVELOPMENT_PWD }}
          #api-key: ${{ secrets.APPLE_API_KEY }}
          #api-key-id: ${{ secrets.APPLE_API_KEY_ID }}
          #api-issuer-id: ${{ secrets.APPLE_API_ISSUER_ID }}
          #team-id: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
          #apple-id: ${{ secrets.APPLE_APPLE_ID }}
          bundle-id: ${{ env.PRODUCT_ID }}
          copyright: ${{ env.PRODUCT_COPYRIGHT }}
          icon-path: ${{ env.OUTPUT_FOLDER }}/icon.icns
          #libs-path: ./ColdClear/universal/
          external-test: ${{ !startsWith(github.ref, 'refs/tags/') }}
          store-release: ${{ startsWith(github.ref, 'refs/tags/') }}
          # An always incrementing integer so app stores can track versions
          # But not the actual version number
          version-string: 0.0.${{ github.run_number }}
      - name: Upload macOS appstore logs artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_appstore_logs
          path: |
            ${{ env.OUTPUT_FOLDER }}/DistributionSummary.plist
            ${{ env.OUTPUT_FOLDER }}/ExportOptions.plist
            ${{ env.OUTPUT_FOLDER }}/Packaging.log
      - name: Upload macOS appstore pkg artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_appstore_pkg
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-appstore.pkg
      - name: Upload macOS appstore pkg release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-appstore.pkg
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}-appstore.pkg
          asset_content_type: application/x-installer

  build-ios:
    runs-on: macos-latest
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Convert iOS icns
        run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}/icns
          sips -z 180 180   ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-60@3x.png
          sips -z 120 120   ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-60@2x.png
          sips -z 167 167   ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-83.5@2x.png
          sips -z 152 152   ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-76@2x.png
          sips -z 1024 1024 ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-1024.png
      - name: Build iOS packages
        id: build-packages
        uses: love-actions/love-actions-ios@v1
        with:
          love-package: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love
          output-folder: ${{ env.OUTPUT_FOLDER }}
          product-name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}
          app-name: ${{ env.PRODUCT_NAME }}
          #apple-development-base64: ${{ secrets.APPLE_CERT_APPLE_DEVELOPMENT_BASE64 }}
          #apple-development-password: ${{ secrets.APPLE_CERT_APPLE_DEVELOPMENT_PWD }}
          #api-key: ${{ secrets.APPLE_API_KEY }}
          #api-key-id: ${{ secrets.APPLE_API_KEY_ID }}
          #api-issuer-id: ${{ secrets.APPLE_API_ISSUER_ID }}
          #team-id: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
          #apple-id: ${{ secrets.APPLE_APPLE_ID }}
          bundle-id: ${{ env.PRODUCT_ID }}
          copyright: ${{ env.PRODUCT_COPYRIGHT }}
          icon-path: ${{ env.OUTPUT_FOLDER }}/icns
          #libs-path: ./ColdClear/arm64/
          #love-patch: ./.github/build/iOS/love.patch
          external-test: ${{ !startsWith(github.ref, 'refs/tags/') }}
          store-release: ${{ startsWith(github.ref, 'refs/tags/') }}
          # An always incrementing integer so app stores can track versions
          # But not the actual version number
          version-string: 0.0.${{ github.run_number }}
      - name: Upload iOS logs artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_iOS_logs
          path: |
            ${{ env.OUTPUT_FOLDER }}/DistributionSummary.plist
            ${{ env.OUTPUT_FOLDER }}/ExportOptions.plist
            ${{ env.OUTPUT_FOLDER }}/Packaging.log
      - name: Upload iOS artifact
        if: env.BUILD_TYPE == 'dev'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_iOS_ipa
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.ipa
      - name: Upload iOS release
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.ipa
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}.ipa
          asset_content_type: application/octet-stream

  publish:
    needs:
      - configure
      - build-love
      - build-linux
      - build-windows
      - build-android
      - build-macos-portable
      - build-macos-appstore
      - build-ios
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Publish release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.configure.outputs.release_id }}
