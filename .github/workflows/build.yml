name: Build LÖVE 🩷💙

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:

env:
  # Landscape or Portrait, landscape is the default
  ANDROID_ORIENTATION: landscape
  # NoRecord or Record. Does the game need microphone access?
  ANDROID_RECORD: NoRecord
  APPIMAGE_VERSION: 1.9.0
  LOVE_VERSION: 11.5
  OUTPUT_FOLDER: ./builds
  PRODUCT_NAME: Template
  PRODUCT_ID: com.ovaltutu.template
  PRODUCT_DESC: A template game made with LÖVE
  PRODUCT_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || '0.0.0' }}
  PRODUCT_COPYRIGHT: Copyright (c) 2025 Oval Tutu
  PRODUCT_COMPANY: Oval Tutu
  PRODUCT_WEBSITE: https://oval-tutu.com
  PRODUCT_UUID: 3e64d17c-8797-4382-921f-cf488b22073f
  TARGET_ANDROID: true
  TARGET_IOS: false
  TARGET_LINUX_APPIMAGE: true
  TARGET_LINUX_TARBALL: true
  TARGET_MACOS_PORTABLE: false
  TARGET_MACOS_APPSTORE: false
  TARGET_WEB: false
  TARGET_WINDOWS_ZIP: true
  TARGET_WINDOWS_SFX: false

jobs:
  configure:
    runs-on: ubuntu-22.04
    outputs:
      android_build_tools_version: ${{ steps.set_android.outputs.android_build_tools_version }}
      android_cmdline_tools_version: ${{ steps.set_android.outputs.android_cmdline_tools_version }}
      android_java_version: ${{ steps.set_android.outputs.android_java_version }}
      android_love_version: ${{ steps.set_android.outputs.android_love_version }}
      android_version_code: ${{ steps.set_android.outputs.android_version_code }}
      build_num: ${{ steps.set_build.outputs.num }}
      build_type: ${{ steps.set_build.outputs.type }}
      release_id: ${{ steps.create_release.outputs.id || '' }}
      upload_url: ${{ steps.create_release.outputs.upload_url || '' }}
      target_android: ${{ env.TARGET_ANDROID }}
      target_ios: ${{ env.TARGET_IOS }}
      target_linux_appimage: ${{ env.TARGET_LINUX_APPIMAGE }}
      target_linux_tarball: ${{ env.TARGET_LINUX_TARBALL }}
      target_macos_portable: ${{ env.TARGET_MACOS_PORTABLE }}
      target_macos_appstore: ${{ env.TARGET_MACOS_APPSTORE }}
      target_web: ${{ env.TARGET_WEB }}
      target_windows_zip: ${{ env.TARGET_WINDOWS_ZIP }}
      target_windows_sfx: ${{ env.TARGET_WINDOWS_SFX }}
    steps:
      - name: Set build parameters
        id: set_build
        shell: bash
        run: |
          echo "num=$(date +%y.%j.%H%M)" >> $GITHUB_OUTPUT
          echo "type=dev" >> $GITHUB_OUTPUT
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "type=release" >> $GITHUB_OUTPUT
          fi
      - name: Check build parameters
        run: |
          echo "******************************"
          echo "Build Number: ${{ steps.set_build.outputs.num }}"
          echo "Build Type:   ${{ steps.set_build.outputs.type }}"
          echo "Build CI:     $([ "$ACT" = "true" ] && echo "act" || echo "GitHub")"
          echo "GitHub Run:   ${{ github.run_number }}"
          echo "Game Version: ${{ env.PRODUCT_VERSION }}"
          echo "LÖVE Version: ${{ env.LOVE_VERSION }}"
          echo "Android:      ${{ env.TARGET_ANDROID == 'true' && '✅' || '❌' }}"
          echo "AppImage:     ${{ env.TARGET_LINUX_APPIMAGE == 'true' && '✅' || '❌' }}"
          echo "iOS:          ${{ env.TARGET_IOS == 'true' && '✅' || '❌' }}"
          echo "macOS:        ${{ env.TARGET_MACOS_PORTABLE == 'true' && '✅' || '❌' }}"
          echo "macOS Store:  ${{ env.TARGET_MACOS_APPSTORE == 'true' && '️✅' || '❌' }}"
          echo "Tarball:      ${{ env.TARGET_LINUX_TARBALL == 'true' && '✅' || '❌' }}"
          echo "Web:          ${{ env.TARGET_WEB == 'true' && '✅' || '❌' }}"
          echo "Windows:      ${{ env.TARGET_WINDOWS_ZIP == 'true' && '✅' || '❌' }}"
          echo "Windows SFX   ${{ env.TARGET_WINDOWS_SFX == 'true' && '✅' || '❌' }}"
          echo "******************************"
      - name: Generate Android parameters
        id: set_android
        shell: bash
        run: |
          echo "android_version_code=$(date +%s)" >> $GITHUB_OUTPUT
          # https://github.com/android-actions/setup-android?tab=readme-ov-file#version-table
          case ${{ env.LOVE_VERSION }} in
            11.5)
              echo "android_love_version=11.5a" >> $GITHUB_OUTPUT
              echo "android_build_tools_version=33.0.1" >> $GITHUB_OUTPUT
              echo "android_cmdline_tools_version=11076708" >> $GITHUB_OUTPUT
              echo "android_java_version=17" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unknown LÖVE version: ${{ env.LOVE_VERSION }}"
              exit 1
              ;;
          esac
      - uses: actions/checkout@v4
        if: ${{ steps.set_build.outputs.type == 'release' }}
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Get PR and Issue List
        id: get_changes
        if: ${{ steps.set_build.outputs.type == 'release' }}
        run: |
          # Get the previous tag or default to first commit
          git fetch --all --tags
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)

          # Get merged PRs
          PRs=$(gh pr list --search "is:merged merged:>${PREV_TAG}" --json number,title,author --template \
            '{{range .}}* #{{.number}} {{.title}} (@{{.author.login}}){{"\n"}}{{end}}')

          # Get closed issues
          ISSUES=$(gh issue list --search "is:closed closed:>${PREV_TAG} -is:pr" --json number,title,author --template \
            '{{range .}}* #{{.number}} {{.title}} (@{{.author.login}}){{"\n"}}{{end}}')

          # Handle empty results
          [ -z "$PRs" ] && PRs="* No pull requests merged in this release"
          [ -z "$ISSUES" ] && ISSUES="* No issues closed in this release"

          # Save outputs
          {
            echo "prs<<EOF"
            echo "$PRs"
            echo "EOF"
            echo "issues<<EOF"
            echo "$ISSUES"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create draft release
        if: ${{ steps.set_build.outputs.type == 'release' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.PRODUCT_NAME }} ${{ github.ref_name }} is out! ️🕹️
          body: |
            ${{ env.PRODUCT_COMPANY }} is delighted to announce the release of ${{ env.PRODUCT_NAME }} ${{ github.ref_name }}! 🎉
            ${{ env.PRODUCT_DESC }}. ${{ env.PRODUCT_COPYRIGHT }}
            * ${{ env.PRODUCT_WEBSITE }}

            This release of ${{ env.PRODUCT_NAME }} was built via:
            - Build number: ${{ steps.set_build.outputs.num }}
            - GitHub Run: ${{github.run_number}}
            - Android version code: ${{ steps.set_android.outputs.android_version_code }}
            - iOS App store version: 0.0.${{github.run_number}}
            - macOS App store version: 0.0.${{github.run_number}}

            ## 🔀 Merged Pull Requests
            ${{ steps.get_changes.outputs.prs }}

            ## 🎯 Closed Issues
            ${{ steps.get_changes.outputs.issues }}

            Full changelog: [`${{ github.ref_name }}`](https://github.com/${{ github.repository }}/commits/${{ github.ref_name }})*

            > This release was automatically generated by GitHub Actions
          draft: true
          prerelease: false

  build-love:
    runs-on: ubuntu-22.04
    needs: [configure]
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Install tools
        run: |
          if [ "$ACT" == "true" ]; then
            sudo apt-get -y update
            sudo apt-get -y install p7zip-full
          fi
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.love" ./game/* -xr!.gitkeep
      - name: Upload .love artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_love
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.love
      - name: Upload .love release
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.love
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}.love
          asset_content_type: application/x-love-game

  build-linux:
    if: ${{ needs.configure.outputs.target_linux_appimage == 'true' || needs.configure.outputs.target_linux_tarball == 'true' }}
    runs-on: ubuntu-22.04
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Install tools
        run: |
          if [ "$ACT" == "true" ]; then
            sudo apt-get -y update
            sudo apt-get -y install p7zip-full
          fi
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Create .png icon
        run: convert ./resources/icon.png -resize 256x256 "${{ env.OUTPUT_FOLDER }}/icon.png"
      # Adapted from:
      # - https://github.com/love-actions/love-actions-linux/blob/main/action.yml
      - name: Create AppImage
        run: |
          sudo apt-get -y install desktop-file-utils libfuse2
          curl -fsSL --retry 5 --retry-delay 15 --connect-timeout 30 --max-time 300 https://github.com/AppImage/appimagetool/releases/download/${{ env.APPIMAGE_VERSION }}/appimagetool-x86_64.AppImage -o ./tools/appimagetool.AppImage || exit 1
          curl -fsSL --retry 5 --retry-delay 15 --connect-timeout 30 --max-time 300 https://github.com/love2d/love/releases/download/${{ env.LOVE_VERSION }}/love-${{ env.LOVE_VERSION }}-x86_64.AppImage -o ./tools/love.AppImage || exit 1
          chmod a+x ./tools/appimagetool.AppImage
          chmod a+x ./tools/love.AppImage
          # Make AppImages work via act in Docker/Podman
          if [ "$ACT" == "true" ]; then
            #https://github.com/AppImage/AppImageKit/issues/1027
            #https://github.com/AppImage/AppImageKit/issues/828
            dd if=/dev/zero bs=1 count=3 seek=8 conv=notrunc of=./tools/appimagetool.AppImage
            dd if=/dev/zero bs=1 count=3 seek=8 conv=notrunc of=./tools/love.AppImage
          fi
          pushd ./tools
            ./love.AppImage --appimage-extract
          popd

          # Remove unwanted files
          rm -v ./tools/squashfs-root/.DirIcon || true
          rm -v ./tools/squashfs-root/love.svg || true
          rm -v ./tools/squashfs-root/share/applications/*.desktop || true
          rm -rfv ./tools/squashfs-root/share/icons || true
          rm -rfv ./tools/squashfs-root/share/mime || true
          rm -rfv ./tools/squashfs-root/share/pixmaps || true
          rm -f ./tools/squashfs-root/love.desktop || true

          # Create .desktop file
          cat > ./tools/squashfs-root/${{ env.PRODUCT_NAME }}.desktop << EOF
          [Desktop Entry]
          Name=${{ env.PRODUCT_NAME }}
          Comment=${{ env.PRODUCT_DESC }}
          Type=Application
          Keywords=love;game;
          Categories=Game;
          Exec=${{ env.PRODUCT_NAME }} %f
          Icon=${{ env.PRODUCT_NAME }}
          Terminal=false
          NoDisplay=false
          EOF
          cp -v ./tools/squashfs-root/${{ env.PRODUCT_NAME }}.desktop ./tools/squashfs-root/share/applications/${{ env.PRODUCT_NAME }}.desktop

          echo "Assembling executable..."
          sed -i 's|bin/love|bin/${{ env.PRODUCT_NAME }}|g' ./tools/squashfs-root/AppRun
          #cat ./tools/squashfs-root/bin/love ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love > ./tools/squashfs-root/bin/${{ env.PRODUCT_NAME }}
          # dd variant of the cat above
          dd if=./tools/squashfs-root/bin/love of=./tools/squashfs-root/bin/${{ env.PRODUCT_NAME }}
          dd if=${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love of=./tools/squashfs-root/bin/${{ env.PRODUCT_NAME }} obs=1M oflag=append conv=notrunc
          chmod +x ./tools/squashfs-root/bin/${{ env.PRODUCT_NAME }}
          rm -f ./tools/squashfs-root/bin/love

          if [ -f "${{ env.OUTPUT_FOLDER }}/icon.png" ]; then
            echo "Copying icon..."
            ICON_PATH=$(basename -- "${{ env.OUTPUT_FOLDER }}/icon.png")
            mkdir -p ./tools/squashfs-root/share/icons/hicolor/256x256/apps
            cp ${{ env.OUTPUT_FOLDER }}/icon.png "./tools/squashfs-root/share/icons/hicolor/256x256/apps/${{ env.PRODUCT_NAME }}.${ICON_PATH##*.}"
            cp ${{ env.OUTPUT_FOLDER }}/icon.png "./tools/squashfs-root/${{ env.PRODUCT_NAME }}.${ICON_PATH##*.}"
            cp ${{ env.OUTPUT_FOLDER }}/icon.png ./tools/squashfs-root/.DirIcon
          fi

          # Copy any required shared libraries
          if [ -d ./resources/linux/lib ]; then
            echo "Copying lib..."
            mkdir -p ./tools/squashfs-root/lib
            cp -r -f ./resources/linux/lib/* ./tools/squashfs-root/lib
          fi

          # Copy any required shared resources
          if [ -d ./resources/linux/share ]; then
            echo "Copying share..."
            mkdir -p ./tools/squashfs-root/share
            cp -r -f ./resources/linux/share/* ./tools/squashfs-root/share
          fi

          # Build appImage package
          if [ "$ACT" == "true" ]; then
            ./tools/appimagetool.AppImage --appimage-extract-and-run ./tools/squashfs-root ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage
          else
            ./tools/appimagetool.AppImage --appimage-extract ./tools/squashfs-root ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage
          fi
          chmod a+x ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage
      - name: Create Tarball
        if: ${{ needs.configure.outputs.target_linux_tarball == 'true' }}
        run: |
          mv -v ./tools/squashfs-root/AppRun ./tools/squashfs-root/${{ env.PRODUCT_NAME }}
          tar -czf ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.tar.gz -C ./tools/squashfs-root .
      - name: Upload AppImage artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' && env.TARGET_LINUX_APPIMAGE == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage.zip
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage
      - name: Upload Tarball artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' && env.TARGET_LINUX_TARBALL == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.tar.gz.zip
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.tar.gz
      - name: Upload AppImage release
        if: ${{ needs.configure.outputs.build_type == 'release' && env.TARGET_LINUX_APPIMAGE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.AppImage
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}.AppImage
          asset_content_type: application/x-executable
      - name: Upload Tarball release
        if: ${{ needs.configure.outputs.build_type == 'release' && env.TARGET_LINUX_TARBALL == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.tar.gz
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}.tar.gz
          asset_content_type: application/gzip

  build-windows:
    if: ${{ needs.configure.outputs.target_windows_sfx == 'true' || needs.configure.outputs.target_windows_zip == 'true' }}
    runs-on: windows-latest
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        shell: bash
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Create .ico icon
        shell: bash
        run: magick ./resources/icon.png -define icon:auto-resize="256,128,96,64,48,32,16" "${{ env.OUTPUT_FOLDER }}/icon.ico"
      # Adapted from:
      # - https://github.com/love-actions/love-actions-windows/blob/main/action.yml
      - name: Download Windows tools
        env:
          TEMP_FILE: ./temp.zip
        shell: bash
        run: |
          cd ./tools
          for ARCH in win32 win64; do
            curl -fsSL --retry 5 --retry-delay 15 --connect-timeout 30 --max-time 300 https://github.com/love2d/love/releases/download/${{ env.LOVE_VERSION }}/love-${{ env.LOVE_VERSION }}-${ARCH}.zip -o ${{ env.TEMP_FILE }} || exit 1
            7z x ${{ env.TEMP_FILE }} -o'./'
            rm ${{ env.TEMP_FILE }}
            mv love-${{ env.LOVE_VERSION }}-${ARCH} love-${ARCH}
            rm ./love-${ARCH}/lovec.exe
            rm ./love-${ARCH}/game.ico
            rm ./love-${ARCH}/love.ico
            rm ./love-${ARCH}/changes.txt
            rm ./love-${ARCH}/readme.txt
          done
          curl -fsSL --retry 5 --retry-delay 15 --connect-timeout 30 --max-time 300 http://www.angusj.com/resourcehacker/resource_hacker.zip -o ${{ env.TEMP_FILE }} || exit 1
          7z x ${{ env.TEMP_FILE }} -o'./'
          rm ${{ env.TEMP_FILE }}
      - name: Resource patch love.exe
        shell: pwsh
        run: |
          cd .\tools\
          cp ${{ env.OUTPUT_FOLDER }}\icon.ico icon.ico
          $exeFiles = @(".\love-win32\love.exe", ".\love-win64\love.exe")
          foreach ($exe in $exeFiles) {
            # Remove the default icon and version info then add the new icon
            cmd /c '".\ResourceHacker.exe" -open "$exe" -save "$exe" -action delete -mask ICONGROUP,,'
            cmd /c '".\ResourceHacker.exe" -open "$exe" -save "$exe" -action delete -mask VERSIONINFO,,'
            cmd /c '".\ResourceHacker.exe" -open "$exe" -save "$exe" -action addoverwrite -res ".\icon.ico" -mask ICONGROUP,1,'
          }
          #TODO: Add rc file support
          #cmd /c '".\ResourceHacker.exe" -open "${{ inputs.rc-path }}" -save ".\${{ env.PRODUCT_NAME }}.res" -action compile'
          #cmd /c '".\ResourceHacker.exe" -open ".\love-win32\love.exe" -save ".\love-win32\love.exe" -action addoverwrite -res ".\${{ env.PRODUCT_NAME }}.res" -mask VERSIONINFO,1,'
          #cmd /c '".\ResourceHacker.exe" -open ".\love-win64\love.exe" -save ".\love-win64\love.exe" -action addoverwrite -res ".\${{ env.PRODUCT_NAME }}.res" -mask VERSIONINFO,1,'
      - name: Create Windows .exe files
        shell: bash
        run: |
          for ARCH in win32 win64; do
            mkdir -p ./tools/build/$ARCH/
            cp ./tools/love-$ARCH/* ./tools/build/$ARCH/
            #cat ./tools/build/${ARCH}/love.exe ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love > ./tools/build/$ARCH/${{ env.PRODUCT_NAME }}.exe
            # dd variant of the cat above
            dd if=./tools/build/${ARCH}/love.exe of=./tools/build/$ARCH/${{ env.PRODUCT_NAME }}.exe
            dd if=${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love of=./tools/build/$ARCH/${{ env.PRODUCT_NAME }}.exe obs=1M oflag=append conv=notrunc
            rm ./tools/build/$ARCH/love.exe
            if [ -d ./resources/windows/$ARCH ]; then
              cp -r -f ./resources/windows/$ARCH ./tools/build/$ARCH/
            fi
          done
      - name: Create Windows .zip files
        shell: bash
        run: |
          for ARCH in win32 win64; do
            7z a -tzip ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_$ARCH.zip ./tools/build/$ARCH/*
          done
      - name: Upload Windows 32-bit artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_win32_zip
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_win32.zip
      - name: Upload Windows 64-bit artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_win64_zip
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_win64.zip
      - name: Upload Windows 32-bit release
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_win32.zip
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}_win32.zip
          asset_content_type: application/zip
      - name: Upload Windows 64-bit release
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_win64.zip
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}_win64.zip
          asset_content_type: application/zip

  # https://love2d.org/wiki/Game_Distribution
  # https://github.com/love2d/love-android
  # https://github.com/love2d/love-android/wiki/Game-Packaging
  build-android:
    if: ${{ needs.configure.outputs.target_android == 'true' }}
    runs-on: ubuntu-22.04
    needs: [configure]
    continue-on-error: true
    env:
      ANDROID_CMDLINE_TOOLS_VERSION: ${{ needs.configure.outputs.android_cmdline_tools_version }}
      ANDROID_JAVA_VERSION: ${{ needs.configure.outputs.android_java_version }}
      ANDROID_LOVE_VERSION: ${{ needs.configure.outputs.android_love_version }}
      ANDROID_VERSION_CODE: ${{ needs.configure.outputs.android_version_code }}
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Install tools
        run: |
          if [ "$ACT" == "true" ]; then
            sudo apt-get -y update
            sudo apt-get -y install p7zip-full rsync
          fi
      - name: Checkout love-android ${{ env.ANDROID_LOVE_VERSION }}
        uses: actions/checkout@v4
        with:
          repository: love2d/love-android
          ref: ${{ env.ANDROID_LOVE_VERSION }}
          submodules: recursive
          path: ./tools/love-android
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Copy love assets
        run: rsync -av --exclude='.gitkeep' ./game/ ./tools/love-android/app/src/embed/assets/
      - name: Modify gradle.properties
        run: |
          # Convert PRODUCT_NAME to bytes and format as comma-separated decimal numbers
          utf8_byte_array=$(echo -n "${{ env.PRODUCT_NAME}}" | od -An -t u1 | tr '\n' ' ' | sed 's/ \+/ /g' | sed 's/^ *//;s/ *$//' | tr ' ' ',')
          sed -i "s/^#app.name=.*/#app.name=${{ env.PRODUCT_NAME }}/" ./tools/love-android/gradle.properties
          sed -i "s/^app.name_byte_array=.*/app.name_byte_array=${utf8_byte_array}/" ./tools/love-android/gradle.properties
          sed -i "s/^app.application_id=.*/app.application_id=${{ env.PRODUCT_ID}}/" ./tools/love-android/gradle.properties
          sed -i "s/^app.orientation=.*/app.orientation=${{ env.ANDROID_ORIENTATION }}/" ./tools/love-android/gradle.properties
          # version_code is an always incrementing integer so app stores can
          # track versions, but not the actual version number
          sed -i "s/^app.version_code=.*/app.version_code=${{ env.ANDROID_VERSION_CODE }}/" ./tools/love-android/gradle.properties
          if [ "${{ needs.configure.outputs.build_type }}" == "release" ]; then
            sed -i "s/^app.version_name=.*/app.version_name=${{ env.PRODUCT_VERSION }}/" ./tools/love-android/gradle.properties
          else
            sed -i "s/^app.version_name=.*/app.version_name=${{ env.BUILD_NUM }}/" ./tools/love-android/gradle.properties
          fi
          cat ./tools/love-android/gradle.properties
      - name: Update android:label in AndroidManifest.xml
        run: sed -i "s/\${NAME}/${{ env.PRODUCT_NAME }}/" ./tools/love-android/app/src/main/AndroidManifest.xml
      - name: Replace icons
        run: |
          convert ./resources/icon.png -resize 48x48 ./tools/love-android/app/src/main/res/drawable-mdpi/love.png
          convert ./resources/icon.png -resize 72x72 ./tools/love-android/app/src/main/res/drawable-hdpi/love.png
          convert ./resources/icon.png -resize 96x96 ./tools/love-android/app/src/main/res/drawable-xhdpi/love.png
          convert ./resources/icon.png -resize 144x144 ./tools/love-android/app/src/main/res/drawable-xxhdpi/love.png
          convert ./resources/icon.png -resize 192x192 ./tools/love-android/app/src/main/res/drawable-xxxhdpi/love.png
          convert ./resources/icon.png -resize 512x512 ./tools/love-android/love_icon_512x512.png
      - name: Add libs
        run: |
          if [ -d ./resources/android ]; then
            mkdir -p ./tools/love-android/app/libs/
            cp -r -f ./resources/android/* ./tools/love-android/app/libs/
          fi
      - name: Get Java ${{ env.ANDROID_JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          cache: gradle
          distribution: temurin
          java-version: ${{ env.ANDROID_JAVA_VERSION }}
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: ${{ env.ANDROID_CMDLINE_TOOLS_VERSION }}
          log-accepted-android-sdk-licenses: false
      - name: Build Android .apks
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        run: |
          pushd ./tools/love-android
            ./gradlew assembleNormal${{ env.ANDROID_RECORD }}Debug assembleNormal${{ env.ANDROID_RECORD }}Release
          popd
          mkdir -p ${{ env.OUTPUT_FOLDER }}/apk/{debug,release}
          mv -v ./tools/love-android/app/build/outputs/apk/*/debug/app-normal-*-debug.apk ${{ env.OUTPUT_FOLDER }}/apk/debug/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-debug.apk
          mv -v ./tools/love-android/app/build/outputs/apk/*/release/app-normal-*-release-unsigned.apk ${{ env.OUTPUT_FOLDER }}/apk/release/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-release.apk
      - name: Sign Android debug .apk
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        id: sign-apk-debug
        uses: kevin-david/zipalign-sign-android-release@v2
        env:
          BUILD_TOOLS_VERSION: ${{ needs.configure.outputs.android_build_tools_version }}
        with:
          releaseDirectory: ${{ env.OUTPUT_FOLDER }}/apk/debug
          signingKeyBase64: ${{ secrets.ANDROID_DEBUG_SIGNINGKEY_BASE64 }}
          alias: ${{ secrets.ANDROID_DEBUG_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_DEBUG_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_DEBUG_KEY_PASSWORD }}
          zipAlign: true
      - name: Sign Android release .apk
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        id: sign-apk-release
        uses: kevin-david/zipalign-sign-android-release@v2
        env:
          BUILD_TOOLS_VERSION: ${{ needs.configure.outputs.android_build_tools_version }}
        with:
          releaseDirectory: ${{ env.OUTPUT_FOLDER }}/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_RELEASE_SIGNINGKEY_BASE64 }}
          alias: ${{ secrets.ANDROID_RELEASE_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}
          zipAlign: true
      - name: Build Android .aab
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        run: |
          pushd ./tools/love-android
            ./gradlew bundleEmbed${{ env.ANDROID_RECORD }}Release
          popd
          mkdir -p ${{ env.OUTPUT_FOLDER }}/aab/release
          mv -v ./tools/love-android/app/build/outputs/bundle/*/app-embed-*-release.aab ${{ env.OUTPUT_FOLDER }}/aab/release/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-release.aab
      - name: Sign Android .aab
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        id: sign-aab-release
        uses: kevin-david/zipalign-sign-android-release@v2
        env:
          BUILD_TOOLS_VERSION: ${{ needs.configure.outputs.android_build_tools_version }}
        with:
          releaseDirectory: ${{ env.OUTPUT_FOLDER }}/aab/release
          signingKeyBase64: ${{ secrets.ANDROID_RELEASE_KEYSTORE }}
          alias: ${{ secrets.ANDROID_RELEASE_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_RELEASE_STOREPASS }}
          keyPassword: ${{ secrets.ANDROID_RELEASE_KEYPASS }}
      - name: Android build artifacts
        run: |
          ls -lh ${{ env.OUTPUT_FOLDER }}/apk/* || true
          if [ -d ${{ env.OUTPUT_FOLDER }}/aab ]; then
            ls -lh ${{ env.OUTPUT_FOLDER }}/aab/* || true
          fi
      - name: Upload Android debug .apk artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-debug-signed.apk.zip
          path: ${{steps.sign-apk-debug.outputs.signedReleaseFile}}
      - name: Upload Android release .apk artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-release-signed.apk.zip
          path: ${{steps.sign-apk-release.outputs.signedReleaseFile}}
      - name: Upload Android release .aab artifact
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-release.aab.zip
          path: ${{steps.sign-aab-release.outputs.signedReleaseFile}}
      - name: Upload Android release
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-release.aab
          asset_path: ${{steps.sign-aab-release.outputs.signedReleaseFile}}
          asset_content_type: application/vnd.android.package-archive

  build-macos-portable:
    if: ${{ needs.configure.outputs.target_macos_portable == 'true' }}
    runs-on: macos-latest
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Create macOS icon.icns
        run: |
          mkdir -p icon.iconset
          sips -z 16 16     ./resources/icon.png --out icon.iconset/icon_16x16.png
          sips -z 32 32     ./resources/icon.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32     ./resources/icon.png --out icon.iconset/icon_32x32.png
          sips -z 64 64     ./resources/icon.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128   ./resources/icon.png --out icon.iconset/icon_128x128.png
          sips -z 256 256   ./resources/icon.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256   ./resources/icon.png --out icon.iconset/icon_256x256.png
          sips -z 512 512   ./resources/icon.png --out icon.iconset/icon_256x256@2x.png
          sips -z 512 512   ./resources/icon.png --out icon.iconset/icon_512x512.png
          sips -z 1024 1024 ./resources/icon.png --out icon.iconset/icon_512x512@2x.png
          iconutil -c icns icon.iconset -o ${{ env.OUTPUT_FOLDER }}/icon.icns
          rm -rf icon.iconset
      - name: Build macOS packages
        id: build-packages
        uses: love-actions/love-actions-macos-portable@v1
        with:
          love-package: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love
          output-folder: ${{ env.OUTPUT_FOLDER }}
          product-name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable
          #account-username: ${{ secrets.APPLE_ACCOUNT_USERNAME }}
          #account-password: ${{ secrets.APPLE_ACCOUNT_PASSWORD }}
          #team-id: "${{ secrets.APPLE_DEVELOPER_TEAM_ID }}"
          app-name: ${{ env.PRODUCT_NAME }}
          bundle-id: ${{ env.PRODUCT_ID }}
          copyright: ${{ env.PRODUCT_COPYRIGHT }}
          #developer-id-application-base64: ${{ secrets.APPLE_CERT_DEVELOPER_ID_APPLICATION }}
          #developer-id-application-password: ${{ secrets.APPLE_CERT_DEVELOPER_ID_APPLICATION_PWD }}
          #developer-id-installer-base64: ${{ secrets.APPLE_CERT_DEVELOPER_ID_INSTALLER }}
          #developer-id-installer-password: ${{ secrets.APPLE_CERT_DEVELOPER_ID_INSTALLER_PWD }}
          #dmg-background-path: ./.github/build/macOS/${{ env.BUILD_TYPE }}/dmg.png
          #dmg-icon-position: "239 203"
          #dmg-icon-size: "100"
          #dmg-link-position: "565 203"
          #dmg-text-size: "12"
          #dmg-volume-icon-path: ./.github/build/macOS/${{ env.BUILD_TYPE }}/dmg.icns
          dmg-volume-name: ${{ env.PRODUCT_NAME }}
          #dmg-window-position: "200 120"
          #dmg-window-size: "800 500"
          icon-path: ${{ env.OUTPUT_FOLDER }}/icon.icns
          version-string: ${{ env.PRODUCT_VERSION }}
      - name: Upload macOS portable pkg artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_portable_pkg
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.pkg
      - name: Upload macOS portable dmg artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_portable_dmg
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.dmg
      - name: Upload macOS zip artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_portable_zip
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.zip
      - name: Upload macOS portable pkg release
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.pkg
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}-portable.pkg
          asset_content_type: application/x-installer
      - name: Upload macOS portable dmg release
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.dmg
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}-portable.dmg
          asset_content_type: application/x-apple-diskimage
      - name: Upload macOS portable zip release
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-portable.zip
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}-portable.zip
          asset_content_type: application/zip

  build-macos-appstore:
    if: ${{ needs.configure.outputs.target_macos_appstore == 'true' }}
    runs-on: macos-latest
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Create macOS icon.icns
        run: |
          mkdir -p icon.iconset
          sips -z 16 16     ./resources/icon.png --out icon.iconset/icon_16x16.png
          sips -z 32 32     ./resources/icon.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32     ./resources/icon.png --out icon.iconset/icon_32x32.png
          sips -z 64 64     ./resources/icon.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128   ./resources/icon.png --out icon.iconset/icon_128x128.png
          sips -z 256 256   ./resources/icon.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256   ./resources/icon.png --out icon.iconset/icon_256x256.png
          sips -z 512 512   ./resources/icon.png --out icon.iconset/icon_256x256@2x.png
          sips -z 512 512   ./resources/icon.png --out icon.iconset/icon_512x512.png
          sips -z 1024 1024 ./resources/icon.png --out icon.iconset/icon_512x512@2x.png
          iconutil -c icns icon.iconset -o ${{ env.OUTPUT_FOLDER }}/icon.icns
          rm -rf icon.iconset
      - name: Build macOS packages
        id: build-packages
        uses: love-actions/love-actions-macos-appstore@v1
        with:
          love-package: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love
          output-folder: ${{ env.OUTPUT_FOLDER }}
          product-name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-appstore
          app-name: ${{ env.PRODUCT_NAME }}
          #apple-development-base64: ${{ secrets.APPLE_CERT_APPLE_DEVELOPMENT_BASE64 }}
          #apple-development-password: ${{ secrets.APPLE_CERT_APPLE_DEVELOPMENT_PWD }}
          #api-key: ${{ secrets.APPLE_API_KEY }}
          #api-key-id: ${{ secrets.APPLE_API_KEY_ID }}
          #api-issuer-id: ${{ secrets.APPLE_API_ISSUER_ID }}
          #team-id: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
          #apple-id: ${{ secrets.APPLE_APPLE_ID }}
          bundle-id: ${{ env.PRODUCT_ID }}
          copyright: ${{ env.PRODUCT_COPYRIGHT }}
          icon-path: ${{ env.OUTPUT_FOLDER }}/icon.icns
          #libs-path: ./ColdClear/universal/
          external-test: ${{ !startsWith(github.ref, 'refs/tags/') }}
          store-release: ${{ startsWith(github.ref, 'refs/tags/') }}
          # An always incrementing integer so app stores can track versions
          # But not the actual version number
          version-string: 0.0.${{ github.run_number }}
      - name: Upload macOS appstore logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_appstore_logs
          path: |
            ${{ env.OUTPUT_FOLDER }}/DistributionSummary.plist
            ${{ env.OUTPUT_FOLDER }}/ExportOptions.plist
            ${{ env.OUTPUT_FOLDER }}/Packaging.log
      - name: Upload macOS appstore pkg artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_macOS_appstore_pkg
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-appstore.pkg
      - name: Upload macOS appstore pkg release
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}-appstore.pkg
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}-appstore.pkg
          asset_content_type: application/x-installer

  build-ios:
    if: ${{ needs.configure.outputs.target_ios == 'true' }}
    runs-on: macos-latest
    needs: [configure]
    continue-on-error: true
    env:
      BUILD_NUM: ${{ needs.configure.outputs.build_num }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Build love package
        run: 7z a -tzip "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love" ./game/* -xr!.gitkeep
      - name: Convert iOS icns
        run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}/icns
          sips -z 180 180   ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-60@3x.png
          sips -z 120 120   ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-60@2x.png
          sips -z 167 167   ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-83.5@2x.png
          sips -z 152 152   ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-76@2x.png
          sips -z 1024 1024 ./resources/icon.png --out ${{ env.OUTPUT_FOLDER }}/icns/icon-1024.png
      - name: Build iOS packages
        id: build-packages
        uses: love-actions/love-actions-ios@v1
        with:
          love-package: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}.love
          output-folder: ${{ env.OUTPUT_FOLDER }}
          product-name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}
          app-name: ${{ env.PRODUCT_NAME }}
          #apple-development-base64: ${{ secrets.APPLE_CERT_APPLE_DEVELOPMENT_BASE64 }}
          #apple-development-password: ${{ secrets.APPLE_CERT_APPLE_DEVELOPMENT_PWD }}
          #api-key: ${{ secrets.APPLE_API_KEY }}
          #api-key-id: ${{ secrets.APPLE_API_KEY_ID }}
          #api-issuer-id: ${{ secrets.APPLE_API_ISSUER_ID }}
          #team-id: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
          #apple-id: ${{ secrets.APPLE_APPLE_ID }}
          bundle-id: ${{ env.PRODUCT_ID }}
          copyright: ${{ env.PRODUCT_COPYRIGHT }}
          icon-path: ${{ env.OUTPUT_FOLDER }}/icns
          #libs-path: ./ColdClear/arm64/
          #love-patch: ./.github/build/iOS/love.patch
          external-test: ${{ !startsWith(github.ref, 'refs/tags/') }}
          store-release: ${{ startsWith(github.ref, 'refs/tags/') }}
          # An always incrementing integer so app stores can track versions
          # But not the actual version number
          version-string: 0.0.${{ github.run_number }}
      - name: Upload iOS logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_iOS_logs
          path: |
            ${{ env.OUTPUT_FOLDER }}/DistributionSummary.plist
            ${{ env.OUTPUT_FOLDER }}/ExportOptions.plist
            ${{ env.OUTPUT_FOLDER }}/Packaging.log
      - name: Upload iOS artifact
        if: ${{ needs.configure.outputs.build_type == 'dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}_iOS_ipa
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.ipa
      - name: Upload iOS release
        if: ${{ needs.configure.outputs.build_type == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.configure.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_NAME }}-${{ env.BUILD_NUM }}.ipa
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.PRODUCT_VERSION }}.ipa
          asset_content_type: application/octet-stream

  publish:
    needs:
      - configure
      - build-love
      - build-linux
      - build-windows
      - build-android
      - build-macos-portable
      - build-macos-appstore
      - build-ios
    runs-on: ubuntu-22.04
    if: ${{ needs.configure.outputs.build_type == 'release' }}
    steps:
      - name: Publish release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.configure.outputs.release_id }}
